<?php
namespace thinkerg\HermesMailing\console;

use Yii;
use yii\console\Controller;
use yii\helpers\Console;
use yii\base\Exception;

/**
 *
 * @author tlsadmin
 *
 * @property $module \thinkerg\HermesMailing\Module
 */
class DefaultController extends Controller
{

    /**
     * Status value of NEVER SENT.
     */
    const ST_NEVER = null;
    
    /**
     * Status value of FAILED. FAILED email will never be resent again.
     */
    const ST_FAILED = 'failed';
    
    /**
     * Status value of RETRY. RETRY email will be tried to resend until reach the EmailQueue::$retry_time.
     */
    const ST_RETRY = 'retry';
    
    /**
     * Status value of SUCCEED.
     */
    const ST_SUCCEED = 'succeed';
    
    /**
     * Whether to enable test mode. If set to ture, command will call testSend() method of the mailer adaptor.
     * Default to false.
     * @var bool
     */
    public $testMode = false;
    
    /**
     * The table name of emails.
     * This attribute is used to get the AR model name during installation and actual emailing.
     * DO NOT add prefix if the "tablePrefix" attribute is set in DBConnection. It will be applied automatically.
     * Default to "queued_email".
     * @var string
     */
    public $queueTableName = 'queued_email'; //DONOT add table prefix.
    
    /**
     * Email AR model name.
     * Make sure the model class is imported after installation.
     * LEAVE THIS NULL, unless the model name is not generated by the table name.
     * If this is set, table name will be retrieved by "tableName()" of its instance.
     * This is for using some already existed AR. Won't be needed for default installation.
     * @var string
     */
    public $modelName; // Leave it null, unless the model name is not generated by the $queueTableName.
    
    /**
     * Column (attribute name) of email table to store process signature.
     * This is mandatory attribute to the AR model. There must be a column to play this role.
     * Default to "signature".
     * @var string
     */
    public $signatureCol = 'signature'; // mandatory  column
    
    /**
     * Column (attribute name) of email table to store sending status.
     * This is mandatory attribute to the AR model. There must be a column to play this role.
     * Default to "status".
     * @var string
     */
    public $statusCol = 'status'; // mandatory  column
    
    /**
     * Column (attribute name) of email table to store retry times.
     * Optional attribute, will only take effects when it exists in the model.
     * Default to "retry_times".
     * @var string
     */
    public $retryCol = 'retry_times';
    
    /**
     * Column (attribute name) of email table to store last send time stamp.
     * Optional attribute, will only take effects when it exists in the model.
     * Default to "last_sent".
     * @var string
     */
    public $lastModCol = 'last_sent';
    
    /**
     * PHP code snippet that will be ran to fill up "last_updated" attribute of email AR.
     * The "last_updated" attribute name is specified by EmailQueueCommand::$lastModCol.
     * Default to "new CDbExpression('CURRENT_TIMESTAMP')".
     * @var string
     */
    public $lastModExpression = "new CDbExpression('CURRENT_TIMESTAMP')";
    
    /**
     * Column (attribute name) of email table to assign emails to be send by the processes from specific server.
     * Optional attribute, will only take effects when it exists in the model.
     * Default to "send_by".
     * @var string
     */
    public $sendByCol = 'send_by';
    
    /**
     * Column (attribute name) of email table to store the server id that actually sent this email out.
     * Optional attribute, will only take effects when it exists in the model.
     * Default to "sent_by".
     * @var string
     */
    public $sentByCol = 'sent_by';
    
    /**
     * Server id of processes start on CURRENT SERVER. The process will retrieve emails assigned to THIS server id in central database.
     * When this is distributed on different servers, make sure this is unique among all servers which is connecting to the same central db.
     * Default to 0.
     * @var int
     */
    public $serverId = 0;
    
    /**
     * How many emails to sign each time.
     * Default to 10.
     * @var int
     */
    public $signSize = 10;
    
    /**
     * How many signed emails are loaded to memory each time.
     * Default to 10.
     * @var int
     */
    public $pageSize = 10;
    
    /**
     * How many times to resend after first send is failed.
     * Only take effects when column specified by EmailQueueCommand::$retryCol exists.
     * Default to 0.
     * @var int
     */
    public $retryTimes = 0;
    
    /**
     * Instance of CDbConnection used.
     * Left it to null to use the db connection of main console application.
     * Use array to initialize a new CDbConnection object.
     * Or use a exsiting CDbConnection instance directly.
     * @var mixed null | array | CDbConnection
     */
    public $db;
    
    /**
     * Spam rules for current PROCESS, each element in format m=>n, where m is the SENT_COUNT n is the SECOND.
     * This means pause n seconds after every m mails sent out.
     * When a larger "m" value is times of smaller "m", only the largest "m" rule is applied, all smaller "m" rules are ignored.
     * @example array(
     *     500 => 10,
     *     1000 => 30
     * ); // Pause 10 secs after 500 emails sent out, pause 30 secs every 1000 emails sent out.
     * @var array
     */
    public $spamRules;
    
    /**
     * Mailer adaptor definition that used to really send email.
     * 'class' element is the alias of adaptor class, all rests are attributes of the adaptor.
     * The specified class must implement interface IMailerAdaptor and the send/testSend methods must return boolean.
     * Default to array('class' => 'EmailQueue.adaptors.ExampleMailerAdaptor').
     * @var array
     */
    public $mailerAdaptor = array(
        'class' => 'EmailQueue.adaptors.ExampleMailerAdaptor',
    );
    
    /**
     * Whether to send the output log to  Yii logger at the same time.
     * Default to false.
     * Disable this to prevent the memory cost increasing because of the Yii logger.
     * @var bool
    */
    public $enableYiiLog = false;
    
    /**
     * Instance of mailer adaptor specified by EmailQueue::$mailerAdaptor.
     * @var IMailerAdaptor
     */
    private $_mailerAdaptor;
    
    /**
     * Emailing counter of current process.
     * @var int
     */
    private $_sendingCount = 0;
    
    /**
     * Used internally while installing.
     * @var bool
     */
    private $_readyToInstall;
    
    /**
     * Signature of current process.
     * @var string
     */
    private $_signature;
    
    /**
     * Static model of mail AR.
     * Returned by invoking MODEL_NAME::model();
     * Default to object of QueuedEmail.
     * @var CActiveRecord
     */
    private $_emailModel;
    
    /**
     * Used by method EmailQueue::applySpamRules2();
     * DON'T modify it.
     * @var array
     */
    private $_nextStop;
    
    /*
     * ============================================================
     * 
     * Attributes below are for installion, and might be used at most for once.
     * If you are using your own Email AR Model, please do not touch this part.
     * 
     * ============================================================
     */
    public $enableInstaller = false;
    
    public $migration = 'thinkerg\HermesMailing\installer\Migration';
    
    public $giiID = 'gii';
    
    public $mailModel = 'app\models\EmailQueue';
    
    public $actions = [];
    
    protected $installAction = 'thinkerg\HermesMailing\installer\actions\InstallAction';
    
    protected $uninstallAction = 'thinkerg\HermesMailing\installer\actions\UninstallAction';
    
    protected $fillTestDataAction = 'thinkerg\HermesMailing\installer\actions\FillTestAction';
    
    private $_migration;
    
    
    /**
     * @inheritdoc
     * @see \yii\base\Controller::beforeAction()
     */
    public function beforeAction($action)
    {
        if (!in_array($action->id, ['index', 'install', 'uninstall'])) {
            try {
                $modelClass = is_string($this->mailModel) ? $this->mailModel : $this->mailModel['class'];
                $found = class_exists($modelClass);
            } catch (Exception $e) {
                $found = false;
            }
            if (!$found) {
                $err = "Cannot find model class <{$modelClass}>." . PHP_EOL;
                $err .= "Maybe you need to install the module and setup the property \"mailModel\"." . PHP_EOL;
                $this->stderr($err, Console::FG_RED);
                Yii::$app->end(1);
            }
        }
        return parent::beforeAction($action);
    }

    /* (non-PHPdoc)
     * @see \yii\base\Controller::actions()
     */
    public function actions()
    {
        if ($this->enableInstaller) {
            $this->actions = array_merge([
                'install' => $this->installAction,
                'uninstall' => $this->uninstallAction,
                'fill-test-data' => $this->fillTestDataAction,
            ], $this->actions);
        }
        return $this->actions;
    }

    public function actionIndex()
    {
        $this->run("/help", [$this->id]);
        return 0;
    }
    
    public function actionSendQueue()
    {
        while ($signedNum = $this->signEmails()) {
            var_dump($signedNum);
        }
    }
    
    /**
     * Sign emails to claim emails send by CURRENT PROCESS, then signed emails will not be retrieved by other processes. 
     * 
     * @param bool $signUnassigned Whether to sign email those are not assigned to any server_id (IS NULL).
     * Take effects only when column specified by EmailQueueCommand::$sendByCol exists.
     * @param bool $renewSignature Whether to renew the signature when sign emails every time.
     * 
     * @todo Implement this
     */
    protected function signEmails($signUnassigned = true, $renewSignature = false)
    {
        $mail = new \app\models\EmailQueue();
        $where = [$this->signatureCol => null];
        if ($mail->hasAttribute($this->sendByCol)) {
            $where = ['and', $where];
            if ($signUnassigned) {
                $where[] = ['or', [$this->sendByCol => ':serverID'], [$this->sendByCol => null]];
            } else {
                $where[] = [$this->sendByCol => ':serverID'];
            }
        }
        $attrs = [$this->signatureCol => $this->getSignature($renewSignature)];
        return $mail::updateAll($attrs, $where, [':serverID' => $this->serverId]);
    }
    
    /**
     * Signature getter.
     * Sleep 1 micro second when renew to ensure the sigature is always unique.
     * @param bool $renew
     * @return string
     */
    public function getSignature($renew = false)
    {
        if ($renew || is_null($this->_signature)) {
            usleep(1);
            $this->_signature = md5(microtime(true) . $this->serverId);
        }
        return $this->_signature;
    }

    /**
     *
     * @return \thinkerg\HermesMailing\components\Migration
     */
    public function getMigration()
    {
        if (empty($this->_migration)) {
            $this->_migration = Yii::createObject($this->migration);
        }
        return $this->_migration;
    }


    /**
     * Terminate application when user cancels operations or some error happens.
     */
    public function userCancel()
    {
        $this->stdout("User canceled.\n", Console::FG_YELLOW);
        Yii::$app->end();
    }


}

?>
